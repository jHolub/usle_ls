import numpy as np
Z = np.array([[10,9,8,7,6,5],
                [11,9,8,7,6,5],
                [12,9,8,7,6,5],
                [13,9,8,7,6,5],
                [14,9,8,7,6,5],
                [15,9,8,7,6,5]])

rows,cols = len(Z), len(Z[0])
N  = [[0,]*(cols)  for i in range(rows)]
print N
print "end"
for x in range(0,cols):
    for y in range(0,rows):
        print Z[x][y] , x , y
#ranging from rows 0 to 1 and columns 0 to 3        
A = Z[0:1,0:3]
N = A
for i in range(1, 3):
    A = A + A
    N+=A
print "end for"    
print N    
print Z 
print 2 + Z   

N = np.zeros(Z.shape, dtype=int)
print N
print
N[1:-1,1:-1] += (Z[ :-2, :-2] + Z[ :-2,1:-1] + Z[ :-2,2:] +
                     Z[1:-1, :-2]                + Z[1:-1,2:] +
                     Z[2:  , :-2] + Z[2:  ,1:-1] + Z[2:  ,2:])
print N 

N_ = N.ravel()
print N_   



import numpy as np
import time

start = time.time() 

Z = np.array([
            [10,9,8,7,5],
            [11,10,8,7,5],
            [12,9,8,9,5],
            [13,9,8,7,5]
            ])

Z = np.arange(10000).reshape(100,100)

nodata = 9999
#    Z2    Z6    Z3
#    Z8    Z     Z7
#    Z4    Z5    Z1
Z1 = np.full(Z.shape,nodata, dtype=int);
Z2 = np.full(Z.shape,nodata, dtype=int);
Z3 = np.full(Z.shape,nodata, dtype=int);
Z4 = np.full(Z.shape,nodata, dtype=int);
Z5 = np.full(Z.shape,nodata, dtype=int);
Z6 = np.full(Z.shape,nodata, dtype=int);
Z7 = np.full(Z.shape,nodata, dtype=int);
Z8 = np.full(Z.shape,nodata, dtype=int);

rows,cols = len(Z), len(Z[0])

Zk1 = np.full(Z.shape,nodata, dtype=int);
Zk1[0:rows-1,0:cols-1] = Z[1:rows,1:cols]
#print Zk1
Zk2 = np.full(Z.shape,nodata, dtype=int);
Zk2[1:rows,1:cols] = Z[0:rows-1,0:cols-1]
#print Zk2

Zk3 = np.full(Z.shape,nodata, dtype=int);
Zk3[1:rows,0:cols-1] = Z[0:rows-1,1:cols]
#print Zk3
Zk4 = np.full(Z.shape,nodata, dtype=int);
Zk4[0:rows-1,1:cols] = Z[1:rows,0:cols-1]
#print Zk4

Zk5 = np.full(Z.shape,nodata, dtype=int);
Zk5[0:rows-1,0:cols] = Z[1:rows,0:cols]
#print Zk5
Zk6 = np.full(Z.shape,nodata, dtype=int);
Zk6[1:rows,0:cols] = Z[0:rows-1,0:cols]
#print Zk6


Zk7 = np.full(Z.shape,nodata, dtype=int);
Zk7[0:rows,0:cols-1] = Z[0:rows,1:cols]
#print Zk7
Zk8 = np.full(Z.shape,nodata, dtype=int);
Zk8[0:rows,1:cols] = Z[0:rows,0:cols-1]
#print Zk8


for x in range(0,cols):
    for y in range(0,rows):
        if (x + 1 < cols) and (y + 1 < rows) : Z1[y][x] = Z[y + 1][x + 1]
        if (x - 1 >= 0) and (y - 1 >= 0) : Z2[y][x] = Z[y - 1][x - 1]
        
        if (x + 1 < cols) and (y - 1 >= 0) : Z3[y][x] = Z[y - 1][x + 1]
        if (x - 1 >= 0) and (y + 1 < rows) : Z4[y][x] = Z[y + 1][x - 1]
        
        if (y + 1 < rows) : Z5[y][x] = Z[y + 1][x]
        if (y - 1 >= 0) : Z6[y][x] = Z[y - 1][x]
        
        if (x + 1 < cols) : Z7[y][x] = Z[y][x + 1]
        if (x - 1 >= 0) : Z8[y][x] = Z[y][x - 1]        
              
#print "Z" , Z
print
#print "Z7" , Z7
print
#print "Z8" , Z8
print
vaha = ( ((Z - Z1) + abs(Z - Z1)) + ((Z - Z2) + abs(Z - Z2)) + ((Z - Z3) + abs(Z - Z3)) + ((Z - Z4) + abs(Z - Z4)) + ((Z - Z5) + abs(Z - Z5)) + ((Z - Z6) + abs(Z - Z6)) + ((Z - Z7) + abs(Z - Z7)) + ((Z - Z8) + abs(Z - Z8))) / 2
print vaha
vahazk = ( ((Z - Zk1) + abs(Z - Zk1)) + ((Z - Zk2) + abs(Z - Zk2)) + ((Z - Zk3) + abs(Z - Zk3)) + ((Z - Zk4) + abs(Z - Zk4)) + ((Z - Zk5) + abs(Z - Zk5)) + ((Z - Zk6) + abs(Z - Zk6)) + ((Z - Zk7) + abs(Z - Zk7)) + ((Z - Zk8) + abs(Z - Zk8))) / 2
print vahazk
print 'It took', time.time()-start, 'seconds.' 

                 